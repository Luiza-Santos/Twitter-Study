# authorisation
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, ROAuth, RCurl)
api_key = '86jsUhllx7dSUK18YwYUNHB2U'
api_secret = 'ASjMtwXgYq5IrZBQBubFalI5sUSq7CB7FqHnMFNaR4gzdGLdNt'
access_token = '984604213912244224-qZNR4vDqVVBDI8EnBB33z6IWFkeRqL9'
access_token_secret = 'ZXmhaj3pYwXrYb8U5cqOtTsqm5K0fHCTUYxHwhEroMqso'
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
# set up the URLs
reqURL = 'https://api.twitter.com/oauth/request_token'
accessURL = 'https://api.twitter.com/oauth/access_token'
authURL = 'https://api.twitter.com/oauth/authorize'
twitCred = OAuthFactory$new(consumerKey = api_key, consumerSecret = api_secret, requestURL = reqURL, accessURL = accessURL, authURL = authURL)
twitCred$handshake(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl'))
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, ROAuth, RCurl)
api_key = '86jsUhllx7dSUK18YwYUNHB2U'
api_secret = 'ASjMtwXgYq5IrZBQBubFalI5sUSq7CB7FqHnMFNaR4gzdGLdNt'
access_token = '984604213912244224-qZNR4vDqVVBDI8EnBB33z6IWFkeRqL9'
access_token_secret = 'ZXmhaj3pYwXrYb8U5cqOtTsqm5K0fHCTUYxHwhEroMqso'
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
# set up the URLs
reqURL = 'https://api.twitter.com/oauth/request_token'
accessURL = 'https://api.twitter.com/oauth/access_token'
authURL = 'https://api.twitter.com/oauth/authorize'
twitCred = OAuthFactory$new(consumerKey = api_key, consumerSecret = api_secret, requestURL = reqURL, accessURL = accessURL, authURL = authURL)
twitCred$handshake(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl'))
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, ROAuth, RCurl)
api_key = '86jsUhllx7dSUK18YwYUNHB2U'
api_secret = 'ASjMtwXgYq5IrZBQBubFalI5sUSq7CB7FqHnMFNaR4gzdGLdNt'
access_token = '984604213912244224-qZNR4vDqVVBDI8EnBB33z6IWFkeRqL9'
access_token_secret = 'ZXmhaj3pYwXrYb8U5cqOtTsqm5K0fHCTUYxHwhEroMqso'
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
# set up the URLs
reqURL = 'https://api.twitter.com/oauth/request_token'
accessURL = 'https://api.twitter.com/oauth/access_token'
authURL = 'https://api.twitter.com/oauth/authorize'
twitCred = OAuthFactory$new(consumerKey = api_key, consumerSecret = api_secret, requestURL = reqURL, accessURL = accessURL, authURL = authURL)
twitCred$handshake(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl'))
library(foreign)
library(syuzhet)
library(lubridate)
library(plyr)
library(ggplot2)
library(tm)
library(wordcloud)
install.packages("syuzhet")
install.packages("tm")
install.packages("wordcloud")
library(foreign)
library(syuzhet)
library(lubridate)
library(plyr)
library(ggplot2)
library(tm)
library(wordcloud)
# harvest some tweets
some_tweets = searchTwitter('trump', n=10000, lang='en')
# get the text
some_txt = sapply(some_tweets, function(x) x$getText()
# harvest some tweets
some_tweets = searchTwitter('trump', n=10000, lang='en')
# get the text
some_txt = sapply(some_tweets, function(x) x$getText())
some_tweets <- searchTwitter('trump', n=10000, lang='en')
# get the text
some_txt <- sapply(some_tweets, function(x) x$getText())
pacman::p_load(twitteR, sentiment, plyr, ggplot2, wordcloud, RColorBrewer, httpuv, RCurl, base64enc)
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
api_key = '86jsUhllx7dSUK18YwYUNHB2U'
api_secret = 'ASjMtwXgYq5IrZBQBubFalI5sUSq7CB7FqHnMFNaR4gzdGLdNt'
access_token = '984604213912244224-qZNR4vDqVVBDI8EnBB33z6IWFkeRqL9'
access_token_secret = 'ZXmhaj3pYwXrYb8U5cqOtTsqm5K0fHCTUYxHwhEroMqso'
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
# harvest some tweets
some_tweets <- searchTwitter('trump', n=10000, lang='en')
# get the text
some_txt <- sapply(some_tweets, function(x) x$getText())
# remove retweet entities
some_txt = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', some_txt)
# remove at people
some_txt = gsub('@\\w+', '', some_txt)
# remove punctuation
some_txt = gsub('[[:punct:]]', '', some_txt)
# remove numbers
some_txt = gsub('[[:digit:]]', '', some_txt)
# remove html links
some_txt = gsub('http\\w+', '', some_txt)
# remove unnecessary spaces
some_txt = gsub('[ \t]{2,}', '', some_txt)
some_txt = gsub('^\\s+|\\s+$', '', some_txt)
# define 'tolower error handling' function
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, 'error'))
y = tolower(x)
# result
return(y)
}
# lower case using try.error with sapply
some_txt = sapply(some_txt, try.error)
# remove NAs in some_txt
some_txt = some_txt[
# remove NAs in some_txt
some_txt = some_txt[!is.na(some_txt)]
names(some_txt) = NULL
# remove NAs in some_txt
some_txt = some_txt[!is.na(some_txt)]
names(some_txt) = NULL
view(some_tweets)
view(some_text)
# Perform Sentiment Analysis
# classify emotion
class_emo = classify_emotion(some_txt, algorithm='bayes', prior=1.0)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by 'unknown'
emotion[is.na(emotion)] = 'unknown'
# classify polarity
class_pol = classify_polarity(some_txt, algorithm='bayes')
# get polarity best fit
polarity = class_pol[,4]
# Create data frame with the results and obtain some general statistics
# data frame with results
sent_df = data.frame(text=some_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
class_emo <- classify_emotion(some_txt, algorithm='bayes', prior=1.0)
# function to get various sentiment scores, using the syuzhet package
scoreSentiment = function(tab)
{
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
tab$bing = get_sentiment(tab$Text, method="bing")
tab$afinn = get_sentiment(tab$Text, method="afinn")
tab$nrc = get_sentiment(tab$Text, method="nrc")
emotions = get_nrc_sentiment(tab$Text)
n = names(emotions)
for (nn in n) tab[, nn] = emotions[nn]
return(tab)
}
# get the sentiment scores for the tweets
tweets = scoreSentiment(tweets)
tweets = tweets[tweets$TimeStamp < as.Date('19-04-2017', format = '%d-%m-%Y'),]
scoreSentiment = function(tab)
{
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
scoreSentiment = function(tab)
{
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
tab$bing = get_sentiment(tab$Text, method="bing")
tab$afinn = get_sentiment(tab$Text, method="afinn")
tab$nrc = get_sentiment(tab$Text, method="nrc")
emotions = get_nrc_sentiment(tab$Text)
n = names(emotions)
for (nn in n) tab[, nn] = emotions[nn]
return(tab)
}
scoreSentiment = function(tab)
{
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
tab$bing = get_sentiment(tab$Text, method="bing")
tab$afinn = get_sentiment(tab$Text, method="afinn")
tab$nrc = get_sentiment(tab$Text, method="nrc")
emotions = get_nrc_sentiment(tab$Text)
n = names(emotions)
for (nn in n) tab[, nn] = emotions[nn]
return(tab)
}
# get the sentiment scores for the tweets
some_txt = scoreSentiment(some_txt)
some_txt = some_txt[some_text$TimeStamp < as.Date('19-04-2017', format = '%d-%m-%Y'),]
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
tab$bing = get_sentiment(tab$Text, method="bing")
tab$afinn = get_sentiment(tab$Text, method="afinn")
tab$nrc = get_sentiment(tab$Text, method="nrc")
emotions = get_nrc_sentiment(tab$Text)
n = names(emotions)
for (nn in n) tab[, nn] = emotions[nn]
return(tab)
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
tab$bing = get_sentiment(tab$Text, method="bing")
tab$afinn = get_sentiment(tab$Text, method="afinn")
tab$nrc = get_sentiment(tab$Text, method="nrc")
emotions = get_nrc_sentiment(tab$Text)
n = names(emotions)
for (nn in n) tab[, nn] = emotions[nn]
return(tab)
}
some_txt = scoreSentiment(some_txt)
some_txt = some_txt[some_text$TimeStamp < as.Date('19-04-2017', format = '%d-%m-%Y'),]
# get the sentiment scores for the tweets
some_txt = scoreSentiment(some_txt)
some_txt = some_txt[some_txt$TimeStamp < as.Date('19-04-2017', format = '%d-%m-%Y'),]
# get the sentiment scores for the tweets
some_tweets = scoreSentiment(some_tweets)
some_tweets = some_tweets[some_tweets$TimeStamp < as.Date('19-04-2017', format = '%d-%m-%Y'),]
# get the sentiment scores for the tweets
some_tweets = scoreSentiment(some_tweets)
some_tweets = some_tweets[some_tweets$TimeStamp < as.Date('19-04-2017', format = '%d-%m-%Y'),]
coreSentiment = function(tab)
{
tab$syuzhet = get_sentiment(tab$Text, method="syuzhet")
tab$bing = get_sentiment(tab$Text, method="bing")
tab$afinn = get_sentiment(tab$Text, method="afinn")
tab$nrc = get_sentiment(tab$Text, method="nrc")
emotions = get_nrc_sentiment(tab$Text)
n = names(emotions)
for (nn in n) tab[, nn] = emotions[nn]
return(tab)
}
names(some_txt) = NULL
some_tweets = scoreSentiment(some_tweets)
some_txt = scoreSentiment(some_txt)
some_txt = scoreSentiment(some_txt)
h/access_token'
authURL = 'https://api.twitter.com/oauth/authorize'
installed.packages("SnowballC")
installed.packages("twitteR")
library(twitteR)
tweets <- userTimeline("realDonaldTrump", n=200)
n.tweet <- length(tweets)
tweets <- userTimeline("realDonaldTrump", n=200)
n.tweet <- length(tweets)
tweets.df <- twListToDF(tweets)
head(tweets.df)
tweets.df2 <- gsub("http.*","",tweets.df$text)
tweets.df2 <- gsub("https.*","",tweets.df2)
tweets.df2 <- gsub("#.*","",tweets.df2)
tweets.df2 <- gsub("@.*","",tweets.df2)
tweets.df2 <- gsub("http.*","",tweets.df$text)
tweets.df2 <- gsub("https.*","",tweets.df2)
tweets.df2 <- gsub("#.*","",tweets.df2)
tweets.df2 <- gsub("@.*","",tweets.df2)
word.df <- as.vector(tweets.df2)
emotion.df <- get_nrc_sentiment(word.df)
emotion.df2 <- cbind(tweets.df2, emotion.df)
head(emotion.df2)
word.df <- as.vector(tweets.df2)
emotion.df <- get_nrc_sentiment(word.df)
emotion.df2 <- cbind(tweets.df2, emotion.df)
head(emotion.df2)
sent.value <- get_sentiment(word.df)
most.positive <- word.df[sent.value == max(sent.value)]
most.positive
1
2
3
4
5
sent.value <- get_sentiment(word.df)
most.positive <- word.df[sent.value == max(sent.value)]
most.positive
most.negative <- word.df[sent.value <= min(sent.value)]
most.negative
sent.value
positive.tweets <- word.df[sent.value > 0]
head(positive.tweets)
negative.tweets <- word.df[sent.value < 0]
head(negative.tweets)
neutral.tweets <- word.df[sent.value == 0] >
head(neutral.tweets)
neutral.tweets <- word.df[sent.value == 0] >
head(neutral.tweets)
neutral.tweets <- word.df[sent.value == 0]
head(neutral.tweets)
# Alternate way to classify as Positive, Negative or Neutral tweets
category_senti <- ifelse(sent.value < 0, "Negative", ifelse(sent.value > 0, "Positive", "Neutral"))
head(category_senti)
category_senti2 <- cbind(tweets,category_senti,senti) > head(category_senti2)
View(tweets.df)
View(emotion.df2)
View(emotion.df)
View(emotion.df2)
negative.tweets <- word.df[sent.value < 0]
head(negative.tweets)
View(emotion.df2)
View(emotion.df2)
daily = ddply(emotion.df2, ~ tweets.df2, summarize, num_tweets = length(positive), ave_sentiment = mean(bing),
ave_negative = mean(negative), ave_positive = mean(positive), ave_anger = mean(anger))
daily = ddply(emotion.df2, ~ tweets.df2, summarize, num_tweets = length(positive),
ave_negative = mean(negative), ave_positive = mean(positive), ave_anger = mean(anger))
View(daily)
daily = ddply(emotion.df2, ~ tweets.df2, summarize,
ave_negative = mean(negative), ave_positive = mean(positive))
View(daily)
ggplot(daily, aes(x=ave_negative, y=ave_positive)) + geom_line() +
ggtitle("Sentiment") + xlab("Neg") + ylab("Pos")
emotion.df2 <- cbind(tweets.df, emotion.df)
View(emotion.df2)
ggplot(emotion.df2, aes(x=retweetCount, y=positive)) + geom_line() +
ggtitle("Sentiment") + xlab("Count") + ylab("Pos")
ggplot(emotion.df2, aes(x=positive, y=retweetCount)) + geom_line() +
ggtitle("Sentiment") + xlab("Count") + ylab("Pos")
ggplot(emotion.df2, aes(x=negative, y=retweetCount)) + geom_line() +
ggtitle("Sentiment") + xlab("Count") + ylab("Neg")
ggplot(emotion.df2, aes(x=retweetCount, y=negative)) + geom_line() +
ggtitle("Sentiment") + xlab("Count") + ylab("Neg")
ggplot(emotion.df2, aes(x=retweetCount, y=negative)) + geom_point() +
ggtitle("Sentiment") + xlab("Count") + ylab("Neg")
ggplot(emotion.df2, aes(x=retweetCount, y=negative)) + geom_point() +
ggtitle("Sentiment") + xlab("Neg") + ylab("Count")
ggplot(emotion.df2, aes(x=retweetCount, y=negative)) + geom_point() +
ggtitle("Sentiment") + xlab("Count") + ylab("Neg")
ggplot(emotion.df2, aes(x=negative, y=retweetCount)) + geom_point() +
ggtitle("Sentiment") + xlab("Neg") + ylab("Count")
ggplot(emotion.df2, aes(x=negative, y=favoriteCount)) + geom_point() +
ggtitle("Sentiment") + xlab("Neg") + ylab("Count")
ggplot(emotion.df2, aes(x=positive, y=favoriteCount)) + geom_point() +
ggtitle("Sentiment") + xlab("Pos") + ylab("Count")
ggplot(emotion.df2, aes(x=positive, y=retweetCount)) + geom_point() +
ggtitle("Sentiment") + xlab("Pos") + ylab("Count")
write.csv(emotion.df2, "trumptweets.csv")
metoo <- searchTwitter("#metoo exclude:retweets", n=3200)
metoo_df <- tbl_df(map_df(metoo, as.data.frame))
write.csv(yeswecan_df, "metoo.csv")
write.csv(metoo_df, "metoo.csv")
metoo_df <- tbl_df(map_df(metoo, as.data.frame))
install.packages("stringr")
install.packages("twitteR")
install.packages("purrr")
install.packages("tidytext")
install.packages("dplyr")
install.packages("tidyr")
install.packages("lubridate")
install.packages("scales")
install.packages("broom")
install.packages("ggplot2")
library(stringr)
library(twitteR)
library(purrr)
library(tidytext)
library(dplyr)
library(tidyr)
library(lubridate)
library(scales)
library(broom)
metoo_df <- tbl_df(map_df(metoo, as.data.frame))
write.csv(metoo_df, "metoo.csv")
write.csv(metoo_df, "metoo.csv")
View(metoo_df)
em_metoo.df <- get_nrc_sentiment(as.vector(metoo_df))
word_emotion.df <- as.vector(metoo_df)
em_metoo.df <- get_nrc_sentiment(word_emotion.df)
View(word_emotion.df)
View(word_emotion.df)
em_metoo.df <- get_nrc_sentiment(metoo_df$text)
metoo_df2 <- gsub("http.*","",metoo_df$text)
metoo_df2 <- gsub("https.*","",metoo_df2)
metoo_df2 <- gsub("#.*","",metoo_df2)
metoo_df2 <- gsub("@.*","",metoo_df2)
metoo_df2 <- gsub("http.*","",metoo_df$text)
metoo_df2 <- gsub("https.*","",metoo_df2)
metoo_df2 <- gsub("#.*","",metoo_df2)
metoo_df2 <- gsub("@.*","",metoo_df2)
emotion.df <- as.vector(metoo_df2)
emotion_metoo.df <- get_nrc_sentiment(emotion.df)
emotion_metoo.df2 <- cbind(metoo_df2, emotion.df)
View(emotion_metoo.df)
View(emotion_metoo.df2)
